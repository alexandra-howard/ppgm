data(occurrences)
trees <- sampletrees
bounds <- list(sigsq = c(min = 0, max = 1000000))
model = "BM"
which.biovars = c(1)
control = list(niter = 20)
use.paleoclimate = TRUE
paleoclimateUser = NULL
layerAge = c(0:20)
data(paleoclimate)
occurrences<-getBioclimVars(occurrences, which.biovars, use.paleoclimate, paleoclimateUser, layerAge)
fossils=FALSE
fossils.edges=FALSE
geo_center<-array(NA,dim=c(length(trees),length(unique(occurrences$Species)),length(paleoclimate),length(paleoclimate)))
geo_size<-array(NA,dim=c(length(trees),length(unique(occurrences$Species)),length(paleoclimate),length(paleoclimate)))
time_int<-array(NA,dim=c(length(paleoclimate),length(paleoclimate)))
treedata_min<-as.list(array(NA,dim=length(trees)))
treedata_max<-as.list(array(NA,dim=length(trees)))
node_est<-as.list(array(NA,dim=length(trees)))
model_min<-as.list(array(NA,dim=length(trees)))
model_max<-as.list(array(NA,dim=length(trees)))
envelope<-as.list(array(NA,dim=length(trees)))
#get bioclimate envelopes
sp_data_min<-sapply(4:(length(which.biovars)+3),function(x) tapply(occurrences[,x],occurrences$Species,min)) #min of biovariable per species
sp_data_mean<-sapply(4:(length(which.biovars)+3),function(x) tapply(occurrences[,x],occurrences$Species,mean))
sp_data_max<-sapply(4:(length(which.biovars)+3),function(x) tapply(occurrences[,x],occurrences$Species,max))
colnames(sp_data_mean)<-which.biovars
for(tr in 1:length(trees)){
treedata_min[[tr]]<-geiger::treedata(trees[[tr]],sp_data_min,sort=TRUE,warnings=F)  #matches species in tree with species in data
treedata_max[[tr]]<-geiger::treedata(trees[[tr]],sp_data_max,sort=TRUE,warnings=F)
colnames(treedata_min[[tr]]$data)<-colnames(treedata_max[[tr]]$data)<-paste("bio",which.biovars,sep="")  #labels biovars
}
permut=2
#set up for parallelisation
ncores <- parallel::detectCores()
cl <- parallel::makeCluster(ncores-1)
doParallel::registerDoParallel(cl)
clusterExport(varlist=c("treedata_min","treedata_max","fossils","fossils.edges","model","bounds","control",
"which.biovars","paleoclimateUser","use.paleoclimate","layerAge","permut"),cl=cl,envir=environment())
full_est <- foreach::foreach(tr=1:length(trees),.packages=c("geiger","ape","ppgm","stringi","phytools")) %dopar% {
full_est <- list()
for(pr in 1:permut) {full_est[[pr]] <- nodeEstimateEnvelopes(treedata_min=treedata_min[[tr]], treedata_max=treedata_max[[tr]], fossils=fossils, fossils.edges=fossils.edges, model=model, bounds=bounds, control=control, which.biovars=which.biovars, paleoclimateUser=paleoclimateUser, use.paleoclimate=use.paleoclimate, layerAge=layerAge)
}
return(full_est)
}
#####################
for(tr in 1:length(trees)){
node_est[[tr]]<-lapply(1:permut, function(p) full_est[[p]][[1]]$est)
model_min[[tr]]<-lapply(1:permut, function(p) full_est[[p]][[1]]$min_model)
model_max[[tr]]<-lapply(1:permut, function(p) full_est[[p]][[1]]$max_model)
}
#get bioclimate envelopes for species and nodes
clusterExport(varlist=c("treedata_min","treedata_max","node_est"),cl=cl,envir=environment())
envelope <- foreach::foreach(tr=1:length(trees),.packages=c("ape","ppgm","phytools")) %dopar% {
getEnvelopes(treedata_min[[tr]],treedata_max[[tr]],node_est[[tr]])
}
clusterExport(varlist=c("envelope","trees","which.biovars"),cl=cl,envir=environment())
temp <- foreach::foreach(tr=1:length(trees),.packages=c("ape","ppgm","phytools")) %dopar% {
getGeoRate(envelope[[tr]],tree=trees[[tr]],which.biovars=which.biovars)
}
#get data from geo displacement
for(tr in 1:length(trees)){
geo_center[tr,,,]<-temp[[1]]$geo_center
geo_size[tr,,,]<-temp[[1]]$geo_size
time_int<-temp[[1]]$time_int
}
stopCluster(cl)
#get data from geo displacement
for(tr in 1:length(trees)){
geo_center[tr,,,]<-temp[[tr]]$geo_center
geo_size[tr,,,]<-temp[[tr]]$geo_size
time_int<-temp[[tr]]$time_int
}
####
data(sampletrees)
data(occurrences)
bounds <- list(sigsq = c(min = 0, max = 1000000))
system.time(test_ppgm <- ppgm(occurrences = occurrences,trees = sampletrees,
model = "BM", which.biovars = c(1), bounds = bounds,
control = list(niter = 20)))
devtools::load_all()
#   user  system elapsed
#  31.18    7.19   62.91
old <- test_ppgm
system.time(test_ppgm <- ppgm(occurrences = occurrences,trees = sampletrees,
model = "BM", which.biovars = c(1), bounds = bounds,
control = list(niter = 20)))
identical(test_ppgm,old)
identical(test_ppgm$cem,old$cem)
identical(test_ppgm$geo_move,old$geo_move)
identical(test_ppgm$node_est,old$node_est)
plot(old$node_est)
old$node_est
plot(old$node_est[[1]])
plot(old$node_est[[1]],test_ppgm$node_est[[1]])
plot(old$node_est[[1]][[1]],test_ppgm$node_est[[1]][[1]])
old$node_est[[1]][[1]]
testplots <- ppgm(occurrences = occurrences,trees = sampletrees,
model = "BM", which.biovars = c(1), bounds = bounds,
control = list(niter = 20),plot.TraitGram = TRUE)
install.packages("svMisc")
devtools::load_all()library(svMisc)
library(svMisc)
?progress
library(progress)
detach("svMisc")
detach("package:svMisc", unload = TRUE)
devtools::load_all()
devtools::document()
devtools::test()
warnings()
devtools::test()
%dopar%
devtools::document()
warnings()
dev.off()
dev.off()
warnings()
devtools::document()
devtools::run_examples()
devtools::test_coverage()
devtools::document()
devtools::test_active_file()
warnigns()
warnings()
#load test data
load(test_path("testdata","testocc.rda"))
load(test_path("testdata","testtree.rda"))
load(test_path("testdata","testfos.rda"))
load(test_path("testdata","testclim.rda"))
newclim <- list(testclim[[2]],testclim[[5]],testclim[[11]])
layerAge <- c(1,4,10)
bounds <- list(a = c(min = -1, max = 5), delta = c(min = 0, max = 1000))
trees=testtree
model="BM"
which.biovars=1
use.paleoclimate=F
paleoclimateUser=newclim
layerAge=layerAge
control = list(niter = 20)
paleoclimateUser = NULL
fossils=FALSE
fossils.edges=FALSE
geo_center<-array(NA,dim=c(length(trees),length(unique(occurrences$Species)),length(paleoclimate),length(paleoclimate)))
geo_size<-array(NA,dim=c(length(trees),length(unique(occurrences$Species)),length(paleoclimate),length(paleoclimate)))
time_int<-array(NA,dim=c(length(paleoclimate),length(paleoclimate)))
treedata_min<-as.list(array(NA,dim=length(trees)))
treedata_max<-as.list(array(NA,dim=length(trees)))
node_est<-as.list(array(NA,dim=length(trees)))
model_min<-as.list(array(NA,dim=length(trees)))
model_max<-as.list(array(NA,dim=length(trees)))
envelope<-as.list(array(NA,dim=length(trees)))
#get bioclimate envelopes
sp_data_min<-sapply(4:(length(which.biovars)+3),function(x) tapply(occurrences[,x],occurrences$Species,min)) #min of biovariable per species
sp_data_mean<-sapply(4:(length(which.biovars)+3),function(x) tapply(occurrences[,x],occurrences$Species,mean))
sp_data_max<-sapply(4:(length(which.biovars)+3),function(x) tapply(occurrences[,x],occurrences$Species,max))
colnames(sp_data_mean)<-which.biovars
for(tr in 1:length(trees)){
treedata_min[[tr]]<-geiger::treedata(trees[[tr]],sp_data_min,sort=TRUE,warnings=F)  #matches species in tree with species in data
treedata_max[[tr]]<-geiger::treedata(trees[[tr]],sp_data_max,sort=TRUE,warnings=F)
colnames(treedata_min[[tr]]$data)<-colnames(treedata_max[[tr]]$data)<-paste("bio",which.biovars,sep="")  #labels biovars
}
ncores <- parallel::detectCores()
cl <- parallel::makeCluster(ncores-1)
doParallel::registerDoParallel(cl)
clusterExport(varlist=c("treedata_min","treedata_max","fossils","fossils.edges","model","bounds","control",
"which.biovars","paleoclimateUser","use.paleoclimate","layerAge","permut"),cl=cl,envir=environment())
permut=2
clusterExport(varlist=c("treedata_min","treedata_max","fossils","fossils.edges","model","bounds","control",
"which.biovars","paleoclimateUser","use.paleoclimate","layerAge","permut"),cl=cl,envir=environment())
full_est <- foreach::foreach(tr=1:length(trees),.packages=c("geiger","ape","ppgm","stringi","phytools")) %dopar% {
full_est <- list()
for(pr in 1:permut) {full_est[[pr]] <- nodeEstimateEnvelopes(treedata_min=treedata_min[[tr]], treedata_max=treedata_max[[tr]], fossils=fossils, fossils.edges=fossils.edges, model=model, bounds=bounds, control=control, which.biovars=which.biovars, paleoclimateUser=paleoclimateUser, use.paleoclimate=use.paleoclimate, layerAge=layerAge)
}
return(full_est)
}
stopCluster(cl)
parallel::stopCluster(cl)
#get data from geo displacement
for(tr in 1:length(trees)){
for(pr in 1:permut){
geo_center[tr,,,]<-temp[[tr]]$geo_center
geo_size[tr,,,]<-temp[[tr]]$geo_size
time_int<-temp[[tr]]$time_int
}
}
cl <- parallel::makeCluster(ncores-1)
doParallel::registerDoParallel(cl)
parallel::clusterExport(varlist=c("treedata_min","treedata_max","fossils","fossils.edges","model","bounds","control",
"which.biovars","paleoclimateUser","use.paleoclimate","layerAge","permut"),cl=cl,envir=environment())
#trait loop
full_est <- foreach::foreach(tr=1:length(trees),.packages=c("geiger","ape","ppgm","stringi","phytools")) %dopar% {
full_est <- list()
for(pr in 1:permut) {full_est[[pr]] <- nodeEstimateEnvelopes(treedata_min=treedata_min[[tr]], treedata_max=treedata_max[[tr]], fossils=fossils, fossils.edges=fossils.edges, model=model, bounds=bounds, control=control, which.biovars=which.biovars, paleoclimateUser=paleoclimateUser, use.paleoclimate=use.paleoclimate, layerAge=layerAge)
}
return(full_est)
}
#####################
for(tr in 1:length(trees)){
node_est[[tr]]<-lapply(1:permut, function(p) full_est[[p]][[1]]$est)
model_min[[tr]]<-lapply(1:permut, function(p) full_est[[p]][[1]]$min_model)
model_max[[tr]]<-lapply(1:permut, function(p) full_est[[p]][[1]]$max_model)
}
#get bioclimate envelopes for species and nodes
clusterExport(varlist=c("treedata_min","treedata_max","node_est"),cl=cl,envir=environment())
envelope <- foreach::foreach(tr=1:length(trees),.packages=c("ape","ppgm","phytools")) %dopar% {
getEnvelopes(treedata_min[[tr]],treedata_max[[tr]],node_est[[tr]])
}
clusterExport(varlist=c("envelope","trees","which.biovars"),cl=cl,envir=environment())
temp <- foreach::foreach(tr=1:length(trees),.packages=c("ape","ppgm","phytools")) %dopar% {
getGeoRate(envelope[[tr]],tree=trees[[tr]],which.biovars=which.biovars)
}
#get data from geo displacement
for(tr in 1:length(trees)){
for(pr in 1:permut){
geo_center[tr,,,]<-temp[[tr]]$geo_center
geo_size[tr,,,]<-temp[[tr]]$geo_size
time_int<-temp[[tr]]$time_int
}
}
temp[[1]]
#get data from geo displacement
for(tr in 1:length(trees)){
geo_center[tr,,,]<-temp[[tr]]$geo_center
geo_size[tr,,,]<-temp[[tr]]$geo_size
time_int<-temp[[tr]]$time_int
}
length(paleoclimate)
load(test_path("testdata","testclim.rda"))
newclim <- list(testclim[[2]],testclim[[5]],testclim[[11]])
paleoclimateUser=newclim
stopCluster(cl)
parallel::stopCluster(cl)
geo_center<-array(NA,dim=c(length(trees),length(unique(occurrences$Species)),length(paleoclimate),length(paleoclimate)))
use.paleoclimate=TRUE
#load paleoclimate data
if(use.paleoclimate) {
utils::data(paleoclimate) #uses paleoclimate data from package
} else {
if(is.null(paleoclimateUser)) {
stop("paleoclimateUser argument must be provided when use.paleoclimate is FALSE.") #uses user inputted paleoclimate
} else {
paleoclimate <- paleoclimateUser
}
}
use.paleoclimate=FALSE
#load paleoclimate data
if(use.paleoclimate) {
utils::data(paleoclimate) #uses paleoclimate data from package
} else {
if(is.null(paleoclimateUser)) {
stop("paleoclimateUser argument must be provided when use.paleoclimate is FALSE.") #uses user inputted paleoclimate
} else {
paleoclimate <- paleoclimateUser
}
}
occurrences = testocc
occurrences<-getBioclimVars(occurrences, which.biovars, use.paleoclimate, paleoclimateUser, layerAge)
#create empty lists for outputs
geo_center<-array(NA,dim=c(length(trees),length(unique(occurrences$Species)),length(paleoclimate),length(paleoclimate)))
geo_size<-array(NA,dim=c(length(trees),length(unique(occurrences$Species)),length(paleoclimate),length(paleoclimate)))
time_int<-array(NA,dim=c(length(paleoclimate),length(paleoclimate)))
treedata_min<-as.list(array(NA,dim=length(trees)))
treedata_max<-as.list(array(NA,dim=length(trees)))
node_est<-as.list(array(NA,dim=length(trees)))
model_min<-as.list(array(NA,dim=length(trees)))
model_max<-as.list(array(NA,dim=length(trees)))
envelope<-as.list(array(NA,dim=length(trees)))
#get bioclimate envelopes
sp_data_min<-sapply(4:(length(which.biovars)+3),function(x) tapply(occurrences[,x],occurrences$Species,min)) #min of biovariable per species
sp_data_mean<-sapply(4:(length(which.biovars)+3),function(x) tapply(occurrences[,x],occurrences$Species,mean))
sp_data_max<-sapply(4:(length(which.biovars)+3),function(x) tapply(occurrences[,x],occurrences$Species,max))
colnames(sp_data_mean)<-which.biovars
for(tr in 1:length(trees)){
treedata_min[[tr]]<-geiger::treedata(trees[[tr]],sp_data_min,sort=TRUE,warnings=F)  #matches species in tree with species in data
treedata_max[[tr]]<-geiger::treedata(trees[[tr]],sp_data_max,sort=TRUE,warnings=F)
colnames(treedata_min[[tr]]$data)<-colnames(treedata_max[[tr]]$data)<-paste("bio",which.biovars,sep="")  #labels biovars
}
#set up for parallelisation
if (is.null(ncores)){ncores <- parallel::detectCores()}
cl <- parallel::makeCluster(ncores-1)
doParallel::registerDoParallel(cl)
parallel::clusterExport(varlist=c("treedata_min","treedata_max","fossils","fossils.edges","model","bounds","control",
"which.biovars","paleoclimateUser","use.paleoclimate","layerAge","permut"),cl=cl,envir=environment())
#trait loop
full_est <- foreach::foreach(tr=1:length(trees),.packages=c("geiger","ape","ppgm","stringi","phytools")) %dopar% {
full_est <- list()
for(pr in 1:permut) {full_est[[pr]] <- nodeEstimateEnvelopes(treedata_min=treedata_min[[tr]], treedata_max=treedata_max[[tr]], fossils=fossils, fossils.edges=fossils.edges, model=model, bounds=bounds, control=control, which.biovars=which.biovars, paleoclimateUser=paleoclimateUser, use.paleoclimate=use.paleoclimate, layerAge=layerAge)
}
return(full_est)
}
#####################
for(tr in 1:length(trees)){
node_est[[tr]]<-lapply(1:permut, function(p) full_est[[p]][[1]]$est)
model_min[[tr]]<-lapply(1:permut, function(p) full_est[[p]][[1]]$min_model)
model_max[[tr]]<-lapply(1:permut, function(p) full_est[[p]][[1]]$max_model)
}
#get bioclimate envelopes for species and nodes
clusterExport(varlist=c("treedata_min","treedata_max","node_est"),cl=cl,envir=environment())
envelope <- foreach::foreach(tr=1:length(trees),.packages=c("ape","ppgm","phytools")) %dopar% {
getEnvelopes(treedata_min[[tr]],treedata_max[[tr]],node_est[[tr]])
}
clusterExport(varlist=c("envelope","trees","which.biovars"),cl=cl,envir=environment())
temp <- foreach::foreach(tr=1:length(trees),.packages=c("ape","ppgm","phytools")) %dopar% {
getGeoRate(envelope[[tr]],tree=trees[[tr]],which.biovars=which.biovars)
}
clusterExport(varlist=c("envelope","trees","which.biovars"),cl=cl,envir=environment())
temp <- foreach::foreach(tr=1:length(trees),.packages=c("ape","ppgm","phytools")) %dopar% {
getGeoRate(envelope[[tr]],tree=trees[[tr]],which.biovars=which.biovars, use.paleoclimate=use.paleoclimate, paleoclimateUser=paleoclimateUser,layerAge=layerAge)
}
#get data from geo displacement
for(tr in 1:length(trees)){
geo_center[tr,,,]<-temp[[tr]]$geo_center
geo_size[tr,,,]<-temp[[tr]]$geo_size
time_int<-temp[[tr]]$time_int
}
parallel::stopCluster(cl)
devtools::test_active_file()
devtools::document()
devtools::check()
library(roxygen2)
library(Rtools)
install.packages("rtools")
devtools::check()
chk <- Sys.getenv("_R_CHECK_LIMIT_CORES_", "")
devtools::check()
devtools::document()
devtools::check()
devtools::load_all()
chk <- Sys.getenv("_R_CHECK_LIMIT_CORES_", "")
if (nzchar(chk) && chk == "TRUE") {
# use 2 cores in CRAN/Travis/AppVeyor
num_workers <- 2L
} else {
# use all cores in devtools::test()
num_workers <- parallel::detectCores()
}
#load test data
load(test_path("testdata","testocc.rda"))
load(test_path("testdata","testtree.rda"))
load(test_path("testdata","testfos.rda"))
load(test_path("testdata","testclim.rda"))
bounds <- list(a = c(min = -1, max = 5), delta = c(min = 0, max = 1000))
#test models
tBM  <- ppgm(testocc, trees=testtree, model="BM", which.biovars=1, use.paleoclimate=F, paleoclimateUser=testclim, ncores=2)
tOU  <- ppgm(testocc, trees=testtree, model="OU", which.biovars=1, use.paleoclimate=F, paleoclimateUser=testclim, ncores=2)
tEB  <- ppgm(testocc, trees=testtree, model="EB", which.biovars=1, use.paleoclimate=F, paleoclimateUser=testclim, ncores=2)
tLa  <- ppgm(testocc, trees=testtree, model="lambda", which.biovars=1, use.paleoclimate=F, paleoclimateUser=testclim, plot.GeoRates = TRUE, ncores=2)
tKa  <- ppgm(testocc, trees=testtree, model="kappa", which.biovars=1, use.paleoclimate=F, paleoclimateUser=testclim, plot.TraitGram = TRUE, ncores=2)
tDe  <- ppgm(testocc, trees=testtree, model="delta", which.biovars=1, use.paleoclimate=F, paleoclimateUser=testclim, verbose=FALSE, ncores=2)
#test est
tEs <- ppgm(testocc, trees=testtree, model="estimate", which.biovars=1, use.paleoclimate=F, paleoclimateUser=testclim, bounds=bounds, ncores=2)
#test fossil
tfos <- ppgm(testocc, trees=testtree, fossils=testfos, which.biovars=1, use.paleoclimate=F, paleoclimateUser=testclim, ncores=2)
#checking outputs
expect_equal(length(tBM$node_est),length(testtree))
expect_equal(length(tfos$node_est),length(testtree))
expect_equal(length(tEs$node_est),length(testtree))
devtools::unload()
rm(list=ls())
devtools::check()
devtools::check()
?system.time
data(occurrences)
library(phytools)
??fitContinuous
knitr::include_graphics("./images/bio1.pdf")
rm(list=ls())
devtools::check()
data(sampletrees)
data(occurrences)
sampletrees <- sample(sampletrees,5)
biooccu <- getBioclimVars(occurrences, which.biovars=1)
sp_data_min<- tapply(biooccu[,4],biooccu$Species,min)
sp_data_max<- tapply(biooccu[,4],biooccu$Species,max)
treedata_min <- treedata_max <- node_est <- envelope <- list()
for (tr in 1:length(sampletrees)){
treedata_min[[tr]] <- geiger::treedata(sampletrees[[tr]],sp_data_min,sort=TRUE,warnings=F)
treedata_max[[tr]] <- geiger::treedata(sampletrees[[tr]],sp_data_max,sort=TRUE,warnings=F)
full_est <- nodeEstimateEnvelopes(treedata_min[[tr]],treedata_max[[tr]])
node_est[[tr]] <- full_est$est
envelope[[tr]] <- getEnvelopes(treedata_min[[tr]], treedata_max[[tr]], node_est[[tr]])
}
data(sampletrees)
data(occurrences)
sampletrees <- sample(sampletrees,5)
biooccu <- getBioclimVars(occurrences, which.biovars=1)
devtools::load_all()
biooccu <- getBioclimVars(occurrences, which.biovars=1)
sp_data_min<- tapply(biooccu[,4],biooccu$Species,min)
sp_data_max<- tapply(biooccu[,4],biooccu$Species,max)
treedata_min <- treedata_max <- node_est <- envelope <- list()
for (tr in 1:length(sampletrees)){
treedata_min[[tr]] <- geiger::treedata(sampletrees[[tr]],sp_data_min,sort=TRUE,warnings=F)
treedata_max[[tr]] <- geiger::treedata(sampletrees[[tr]],sp_data_max,sort=TRUE,warnings=F)
full_est <- nodeEstimateEnvelopes(treedata_min[[tr]],treedata_max[[tr]])
node_est[[tr]] <- full_est$est
envelope[[tr]] <- getEnvelopes(treedata_min[[tr]], treedata_max[[tr]], node_est[[tr]])
}
tree <- sampletrees
which.biovars <- 1
#load paleoclimate data
if(use.paleoclimate) {
paleoclimate <- paleoclimate #uses paleoclimate data from package
} else {
if(is.null(paleoclimateUser)) {
stop("paleoclimateUser argument must be provided when use.paleoclimate is FALSE.") #uses user inputted paleoclimate
} else {
paleoclimate <- paleoclimateUser
}
}
temp_min<-as.list(array(NA,dim=length(tree)))
temp_max<-as.list(array(NA,dim=length(tree)))
richnesscount<-as.list(array(NA,dim=length(tree)))
for(tr in 1:length(tree)){
temp_min[[tr]]<-lapply(1:length(paleoclimate),function(i){
temp<-lapply(1:length(which.biovars),function(j){getTimeSlice(layerAge[[i]],tree[[tr]],envelope[[tr]][,2,j])})
temp<-t(array(unlist(temp),dim=c(length(unlist(temp[[1]]$edge)),2*length(which.biovars))))
return(temp)})
temp_max[[tr]]<-lapply(1:length(paleoclimate),function(i){
temp<-lapply(1:length(which.biovars),function(j){getTimeSlice(layerAge[[i]],tree[[tr]],envelope[[tr]][,5,j])})
temp<-t(array(unlist(temp),dim=c(length(unlist(temp[[1]]$edge)),2*length(which.biovars))))
return(temp)})
allhld <- as.list(array(NA,dim=length(paleoclimate)))
for (j in 1:length(paleoclimate)){
hld<-array(0,dim=length(paleoclimate[[j]][,1]))
for(i in 1:length(temp_min[[tr]][[j]][1,])){
matching <- sapply(1:length(which.biovars),function(x){
paleoclimate[[j]][,which.biovars[x]+3]>temp_min[[tr]][[j]][1:length(which.biovars)*2,i][x] &
paleoclimate[[j]][,which.biovars[x]+3]<temp_max[[tr]][[j]][1:length(which.biovars)*2,i][x]
})
matching<-which(rowSums(matching)==length(which.biovars),arr.ind=TRUE)
hld[matching]<-hld[matching]+1
}
hld[which(hld==0,arr.ind=TRUE)]=NA
allhld[[j]] <-hld
}
richnesscount[[tr]] <- allhld
}
layerAge=c(0:20)
paleoclimateUser=NULL
use.paleoclimate=TRUE
for(tr in 1:length(tree)){
temp_min[[tr]]<-lapply(1:length(paleoclimate),function(i){
temp<-lapply(1:length(which.biovars),function(j){getTimeSlice(layerAge[[i]],tree[[tr]],envelope[[tr]][,2,j])})
temp<-t(array(unlist(temp),dim=c(length(unlist(temp[[1]]$edge)),2*length(which.biovars))))
return(temp)})
temp_max[[tr]]<-lapply(1:length(paleoclimate),function(i){
temp<-lapply(1:length(which.biovars),function(j){getTimeSlice(layerAge[[i]],tree[[tr]],envelope[[tr]][,5,j])})
temp<-t(array(unlist(temp),dim=c(length(unlist(temp[[1]]$edge)),2*length(which.biovars))))
return(temp)})
allhld <- as.list(array(NA,dim=length(paleoclimate)))
for (j in 1:length(paleoclimate)){
hld<-array(0,dim=length(paleoclimate[[j]][,1]))
for(i in 1:length(temp_min[[tr]][[j]][1,])){
matching <- sapply(1:length(which.biovars),function(x){
paleoclimate[[j]][,which.biovars[x]+3]>temp_min[[tr]][[j]][1:length(which.biovars)*2,i][x] &
paleoclimate[[j]][,which.biovars[x]+3]<temp_max[[tr]][[j]][1:length(which.biovars)*2,i][x]
})
matching<-which(rowSums(matching)==length(which.biovars),arr.ind=TRUE)
hld[matching]<-hld[matching]+1
}
hld[which(hld==0,arr.ind=TRUE)]=NA
allhld[[j]] <-hld
}
richnesscount[[tr]] <- allhld
}
devtools::load_all()
data(sampletrees)
data(occurrences)
bounds <- list(sigsq = c(min = 0, max = 1000000))
test_ppgm <- ppgm(occurrences = occurrences,trees = sampletrees,
model = "BM", which.biovars = c(1), bounds = bounds,
control = list(niter = 20))
test_ppgm <- ppgm(occurrences = occurrences,trees = sampletrees,
model = "BM", which.biovars = c(1), bounds = bounds,
control = list(niter = 20),use.parallel=TRUE)
test_ppgm$richnesscount
plotAnimatedPPGMMultiPhylo(test_ppgm$richnesscount)
devtools::load_all()
plotAnimatedPPGMMultiPhylo(test_ppgm$richnesscount)
dim(test_ppgm$richnesscount)
summary(test_ppgm$richnesscount)
cite()
cite('gifski')
?cite()
citation("gifski")
citation("doparallel")
citation("doParallel")
citation("foreach")
dev.off()
citation("parallel")
citation("fields")
devtools::document()
devtools::document()
save.image(file="testenv.Rdata")
rm(list=ls())
devtools::document()
devtools::check()
dev.off()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
.Last.error
$stdout
library(abind)
library()
library(lib.loc=.Library)
detach(ppgm)
detach("ppgm")
